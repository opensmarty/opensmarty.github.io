<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[markdown语法]]></title>
    <url>%2F2017%2F08%2F24%2Fmarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[markdown语法常用语法粗体在字体两侧分别加两个星号 ** ， 当然，也能使用快捷键 Ctrl + B 快速加粗； 斜体将需要设置为斜体的文字两端使用一个 * （或者 _ ） 夹起来，快捷键 Ctrl + I ； 删除线在需要设置删除线的文字两侧加两个波浪线 ~~ 夹起来，可以表示删除文字； 分割线分割线的语法只需要三个星号*或者三个小短线 - 号 外链接描述 为文字添加外链接，可以使用快捷键 Ctrl + L 快速设置；示例： opensmarty的博客显示： 这里是opensmarty的博客 链接。 内嵌代码第一种:引入单行代码出现一个代码框，需要使用键盘左上角的ESC键下面的反单引号夹在文字两侧，两侧各一个就行。例如：`Hellow world！` 第二种：多行代码的引入需要在代码段的前后分别使用三个反单引号显示： 1234for (int i = 0; i &lt; 100; i++)&#123; printf("hello markdown!\n");&#125; ## 引入内容 第一种: 通过在文字开头添加“&gt;”表示块注释，快捷键使用 Ctrl + Q 例如；如果你无法简洁的表达你的想法，那只说明你还不够了解它。 -- 阿尔伯特·爱因斯坦 第二种: 使用tab键或者四个空格一个项目两部电脑三餐盒饭只为四千工资搞得五脏俱损六神无主仍然七点起床八点开会处理九个漏洞十分辛苦十年编码九年加班八面无光忙的七窍生烟到头六亲不认五体投地依旧四肢酸软三更加班只为二个臭钱一生孤苦 插入图片插入图片的语法与插入链接很像，区别在一个插入图片的时候需要加一个!号 Markdown语法： 分级标题标题是每篇文章中最常用的格式，在Markdown语法中，如果某行文字被定义为标题，只需要在行首加上#符号即可： H1 : # Header 1H2 : ## Header 2H3 : ### Header 3H4 : #### Header 4H5 : ##### Header 5H6 : ###### Header 6 是几级标题就用几个 # 符号，每增加一个 # 表示更深入一个层次的内容，总共有六级标题。 标准的Markdown语法需要在符号后面多加一个空格，建议加上。 上面这种设置标题的方式是最为直观的，当然在Markdown语法下，我们也可以通过在文字下方添加“=”和“-”，他们分别表示一级标题和二级标题，例如: 我是一级标题我是二级标题无序列表使用一个 *，+或- 表示无序列表。 示例： * 无序列表项 一 * 无序列表项 二 * 无序列表项 三 有序列表使用数字和英文句点表示有序列表, 不要求数字一定要连续。 示例： 有序列表项 一 有序列表项 二 有序列表项 三 绘制表格 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 反斜杠Markdown 支持在以下这些符号前面加上反斜杠来帮助插入普通的符号： \ 反斜线` 反引号 星号_ 底线{} 花括号[] 方括号() 括弧井字号 加号 减号. 英文句点! 惊叹号 本文有任何错误，或有任何疑问，欢迎留言说明。邮箱: opensmarty@163.comQQ: 1327400982 Reference linksgulp入门教程markdown语法]]></content>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[详解入门gulp]]></title>
    <url>%2F2017%2F08%2F24%2F%E8%AF%A6%E8%A7%A3%E5%85%A5%E9%97%A8gulp%2F</url>
    <content type="text"><![CDATA[简介： gulp是前端开发过程中对代码进行构建的工具，是自动化项目的构建利器；她不仅能对网站资源进行优化，而且在开发过程中很多重复的任务能够使用正确的工具自动完成；使用她，我们不仅可以很愉快的编写代码，而且大大提高我们的工作效率。 gulp是基于Nodejs的自动任务运行器， 她能自动化地完成 javascript/coffee/sass/less/html/image/css 等文件的的测试、检查、合并、压缩、格式化、浏览器自动刷新、部署文件生成，并监听文件在改动后重复指定的这些步骤。在实现上，她借鉴了Unix操作系统的管道（pipe）思想，前一级的输出，直接变成后一级的输入，使得在操作上非常简单。通过本文，我们将学习如何使用Gulp来改变开发流程，从而使开发更加快速高效。 gulp 和 grunt 非常类似，但相比于 grunt 的频繁 IO 操作，gulp 的流操作，能更快地更便捷地完成构建工作。 本示例以gulp-less为例（将less编译成css的gulp插件）展示gulp的常规用法，只要我们学会使用一个gulp插件后，其他插件就差看看其帮助文档了。让我们一起来学习gulp吧！ ^_^ gulp常用地址： gulp官方网址：&lt;http://gulpjs.com&gt; gulp插件地址：&lt;http://gulpjs.com/plugins&gt; gulp 官方API：&lt;https://github.com/gulpjs/gulp/blob/master/docs/API.md&gt; gulp 中文API：&lt;http://www.ydcss.com/archives/424&gt; 在学习前，先谈谈大致使用gulp的步骤，给读者以初步的认识。首先当然是安装nodejs，通过nodejs的npm全局安装和项目安装gulp，其次在项目里安装所需要的gulp插件，然后新建gulp的配置文件gulpfile.js并写好配置信息（定义gulp任务），最后通过命令提示符运行gulp任务即可。 安装nodejs -&gt; 全局安装gulp -&gt; 项目安装gulp以及gulp插件 -&gt; 配置gulpfile.js -&gt; 运行任务 安装nodejs说明：gulp是基于nodejs，理所当然需要安装nodejs；安装：打开nodejs官网，点击硕大的绿色Download按钮，它会根据系统信息选择对应版本（.msi文件）。然后像安装QQ一样安装它就可以了（安装路径随意）。使用命令行（如果你熟悉命令行，可以直接跳到第3步）说明：什么是命令行？命令行在OSX是终端（Terminal），在windows是命令提示符（Command Prompt）；注：之后操作都是在windows系统下；简单介绍gulp在使用过程中常用命令，打开命令提示符执行下列命令（打开方式：window + r 输入cmd回车）：node -v查看安装的nodejs版本，出现版本号，说明刚刚已正确安装nodejs。PS：未能出现版本号，请尝试注销电脑重试； npm -v查看npm的版本号，npm是在安装nodejs时一同安装的nodejs包管理器，那它有什么用呢？稍后解释； cd定位到目录，用法：cd + 路径 ； dir列出文件列表； cls清空命令提示符窗口内容。 npm介绍说明：npm（node package manager）nodejs的包管理器，用于node插件管理（包括安装、卸载、管理依赖等）；使用npm安装插件：命令提示符执行npm install [-g] [–save-dev]；：node插件名称。例：npm install gulp-less –save-dev-g：全局安装。将会安装在C:\Users\Administrator\AppData\Roaming\npm，并且写入系统环境变量； 非全局安装：将会安装在当前定位目录； 全局安装可以通过命令行在任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过require()调用；–save：将保存配置信息至package.json（package.json是nodejs项目配置文件）；-dev：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；一般保存在dependencies的像这些express/ejs/body-parser等等。为什么要保存至package.json？因为node插件包相对来说非常庞大，所以不加入版本管理，将配置信息写入package.json并将其加入版本管理，其他开发者对应下载即可（命令提示符执行npm install，则会根据package.json下载所有需要的包，npm install –production只下载dependencies节点的包）。使用npm卸载插件：npm uninstall [-g] [–save-dev] PS：不要直接删除本地插件包删除全部插件：npm uninstall gulp-less gulp-uglify gulp-concat ……???太麻烦借助rimraf：npm install rimraf -g 用法：rimraf node_modules使用npm更新插件：npm update [-g] [–save-dev]更新全部插件：npm update [–save-dev]查看npm帮助：npm help当前目录已安装插件：npm listPS：npm安装插件过程：从http://registry.npmjs.org下载对应的插件包（该网站服务器位于国外，所以经常下载缓慢或出现异常），解决办法往下看↓↓↓↓↓↓。 选装cnpm说明：因为npm安装插件是从国外服务器下载，受网络影响大，可能出现异常，如果npm的服务器在中国就好了，所以我们乐于分享的淘宝团队干了这事。32个！来自官网：“这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。”；官方网址：http://npm.taobao.org；安装：命令提示符执行npm install cnpm -g –registry=https://registry.npm.taobao.org； 注意：安装完后最好查看其版本号cnpm -v或关闭命令提示符重新打开，安装完直接使用有可能会出现错误；注：cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm（以下操作将以cnpm代替npm）。 全局安装gulp说明：全局安装gulp目的是为了通过她执行gulp任务；安装：命令提示符执行cnpm install gulp -g；查看是否正确安装：命令提示符执行gulp -v，出现版本号即为正确安装。新建package.json文件说明：package.json是基于nodejs项目必不可少的配置文件，它是存放在项目根目录的普通json文件；它是这样一个json文件（注意：json文件内是不能写注释的，复制下列内容请删除注释）：12345678910111213141516171819&#123; "name": "test", //项目名称（必须） "version": "1.0.0", //项目版本（必须） "description": "This is for study gulp project !", //项目描述（必须） "homepage": "", //项目主页 "repository": &#123; //项目资源库 "type": "git", "url": "https://git.oschina.net/xxxx" &#125;, "author": &#123; //项目作者信息 "name": "surging", "email": "surging2@qq.com" &#125;, "license": "ISC", //项目许可协议 "devDependencies": &#123; //项目依赖的插件 "gulp": "^3.8.11", "gulp-less": "^3.0.0" &#125;&#125; 当然我们可以手动新建这个配置文件，但是作为一名有志青年，我们应该使用更为效率的方法：命令提示符执行cnpm init查看package.json帮助文档，命令提示符执行cnpm help package.json特别注意：package.json是一个普通json文件，所以不能添加任何注释。[参看] (http://www.zhihu.com/question/23004511) 本地安装gulp插件安装：定位目录命令后提示符执行cnpm install –save-dev；本示例以gulp-less为例（编译less文件），命令提示符执行cnpm install gulp-less –save-dev；将会安装在node_modules的gulp-less目录下，该目录下有一个gulp-less的使用帮助文档README.md；为了能正常使用，我们还得本地安装gulp：cnpm install gulp –save-dev；细心的你可能会发现，我们全局安装了gulp，项目也安装了gulp，全局安装gulp是为了执行gulp任务，本地安装gulp则是为了调用gulp插件的功能。新建gulpfile.js文件（重要）说明：gulpfile.js是gulp项目的配置文件，是位于项目根目录的普通js文件（其实将gulpfile.js放入其他文件夹下亦可）。它大概是这样一个js文件（更多插件配置请查看这里）：12345678910111213141516//导入工具包 require('node_modules里对应模块')var gulp = require('gulp'), //本地安装gulp所用到的地方 less = require('gulp-less');//定义一个testLess任务（自定义任务名称）gulp.task('testLess', function () &#123; gulp.src('src/less/index.less') //该任务针对的文件 .pipe(less()) //该任务调用的模块 .pipe(gulp.dest('src/css')); //将会在src/css下生成index.css&#125;);gulp.task('default',['testLess', 'elseTask']); //定义默认任务 elseTask为其他任务，该示例没有定义elseTask任务//gulp.task(name[, deps], fn) 定义任务 name：任务名称 deps：依赖任务名称 fn：回调函数//gulp.src(globs[, options]) 执行任务处理的文件 globs：处理的文件路径(字符串或者字符串数组)//gulp.dest(path[, options]) 处理完后文件生成路径 该示例文件请下载查看运行gulp说明：命令提示符执行gulp 任务名称；编译less：命令提示符执行gulp testLess；当执行gulp default或gulp将会调用default任务里的所有任务[‘testLess’,’elseTask’]。使用webstorm运行gulp任务说明：使用webstorm可视化运行gulp任务；使用方法：将项目导入webstorm，右键gulpfile.js 选择”Show Gulp Tasks”打开Gulp窗口，若出现”No task found”，选择右键”Reload tasks”，双击运行即可。总结安装nodejs；新建package.json文件；全局和本地安装gulp；安装gulp插件；新建gulpfile.js文件；通过命令提示符运行gulp任务。结束语本文有任何错误，或有任何疑问，欢迎留言说明。邮箱: opensmarty@163.comQQ: 1327400982 Reference links详解入门gulpgulp入门教程]]></content>
  </entry>
  <entry>
    <title><![CDATA[glup入门教程]]></title>
    <url>%2F2017%2F08%2F24%2Fglup%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[gulp教程之 jshintgulp jshint 插件主要用于检查代码，打印报告信息。 jshint 的安装命令:1ncmp install jshint gulp-jshint --save-dev gulpfile.js 文件配置：1234567var gulp = require("gulp");var jshint = require("gulp-jshint");gulp.task("scripts",function()&#123; gulp.src("src/js/*.js") .pipe(jshint()) .pipe(jshint.reporter("default"))&#125;); 执行命令： gulp scripts如果想要让检查的信息以突出的样式显示，可以使用 jshint-stylish 插件来实现 给检索代码结果添加样式 的 jshint-stylish 插件安装命令：1cnpm install --svae-dev jshint-stylish gulpfile.js 文件配置：12345678var gulp = require("gulp");var jshint = require("gulp-jshint");gulp.task("scripts",function()&#123; gulp.src("src/js/*.js") .pipe(jshint()) .pipe(jshint.reporter("stylish")) //.pipe(jshint.reporter("jshint-stylish")) //或直接引用，不使用上一行的方式&#125;); 如果想查看检查结果的详细的错误信息，可以使用 map-stream 这个插件 检索代码具体错误信息插件的安装命令：1cnpm install --save-dev map-stream gulpfile.js 文件配置：12345678910111213141516171819var map = require("map-stream");var customerReporter = map(function (file, cb) &#123; if (!file.jshint.success) &#123; //打印出错误信息 console.log("jshint fail in:" + file.path); file.jshint.results.forEach(function (err) &#123; if (err) &#123; console.log(err); console.log("在 " + file.path + " 文件的第" + err.error.line + " 行的第" + err.error.character + " 列发生错误"); &#125; &#125;); &#125;&#125;);gulp.task("scripts", function () &#123; gulp.src("src/js/*.js") .pipe(jshint()) .pipe(customerReporter);&#125;); 执行命令： gulp scriptsgulp-concat（合并文件）gulp 的 concat 插件主要用于合并文件，把也就是多个文件合并到一个文件中，以节省存储空间。 安装命令：1cnpm install --save-dev gulp-concat gulpfile.js 文件配置：123456var concat = require('gulp-concat');gulp.task("scripts",function()&#123; gulp.src("src/js/*.js") .pipe(concat("all.js")) .pipe(gulp.dest("dist"))&#125;); 在cmd 命令行控制器中执行定义好的任务：1gulp concat gulp-if插件功能描述为功能执行添加条件判断，跟程序语言中的if是相同语义 插件安装1cnpm install gulp-if --save-dev 使用方法12345678910111213141516var gulp = require('gulp'), gulpif = require('gulp-if'), imagemin = require('gulp-imagemin'), pump = require('pump');// 是否生产环境global.production = true;gulp.task('testImagemin', function () &#123; pump([ gulp.src('src/img/*.&#123;png,jpg,gif,ico&#125;'), // 生产环境，对图片进行压缩，否则不压缩 gulpif(!global.production, imagemin()), gulp.dest('dist/img') ])&#125;); gulp-rename插件功能描述修改文件名，例如将demo.css修改为demo.min.css，一般配合gulp-minify-css/gulp-uglify压缩插件一起使用 插件安装1cnpm install gulp-rename --save-dev 使用方法CSS文件压缩后进行更名为xxx.min.css，123456789101112131415var gulp = require('gulp'), minifyCss = require('gulp-minify-css'), rename = require('gulp-rename'), pump = require('pump');gulp.task('testRenameCss', function(cb) &#123; pump([ gulp.src('src/css/*.css'), rename(&#123;suffix: '.min'&#125;) minifyCss(&#123; keepSpecialComments: '*' &#125;), gulp.dest('dist/css') ])&#125;); js文件压缩后更名为xxx.min.js12345678910111213var gulp = require('gulp'), minifyCss = require('gulp-uglify'), rename = require('gulp-rename'), pump = require('pump');gulp.task('testRenameJs', function(cb) &#123; pump([ gulp.src('src/js/*.js'), rename(&#123;suffix: '.min'&#125;), uglify(), gulp.dest('dist/js') ])&#125;); gulp-clean插件功能描述删除文件及文件夹 插件安装1cnpm install gulp-clean --save-dev 使用方法删除dist文件夹123456789var gulp = require('gulp'), clean = require('gulp-clean'), pump = require('pump');gulp.task('clean', function(cb) &#123; pump([ gulp.src('./dist'), clean() ], cb)&#125;) gulp-imagemin插件功能描述图片文件压缩（包括PNG、JPEG、GIF和SVG图片） 插件安装1cnpm install gulp-imagemin --save-dev 使用方法参数1234567891011var gulp = require('gulp'), imagemin = require('gulp-imagemin'), pump = require('pump');gulp.task('testImagemin', function (cb) &#123; pump([ gulp.src('src/img/*.&#123;png,jpg,gif,ico&#125;'), imagemin(), gulp.dest('dist/img') ], cb);&#125;); 参数配置12345678910111213141516var gulp = require('gulp'), imagemin = require('gulp-imagemin'), pump = require('pump');gulp.task('testImagemin', function (cb) &#123; pump([ gulp.src('src/img/*.&#123;png,jpg,gif,ico&#125;'), imagemin(&#123; optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级） progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片 interlaced: true, //类型：Boolean 默认：false 隔行扫描gif进行渲染 multipass: true //类型：Boolean 默认：false 多次优化svg直到完全优化 &#125;), gulp.dest('dist/img') ], cb);&#125;); 深度压缩图片1234567891011121314151617var gulp = require('gulp'), imagemin = require('gulp-imagemin'), //cnpm install imagemin-pngquant --save-dev pngquant = require('imagemin-pngquant'), pump = require('pump');gulp.task('testImagemin', function () &#123; pump([ gulp.src('src/img/*.&#123;png,jpg,gif,ico&#125;'), imagemin(&#123; progressive: true, svgoPlugins: [&#123;removeViewBox: false&#125;],//不要移除svg的viewbox属性 use: [pngquant()] //使用pngquant深度压缩png图片的imagemin插件 &#125;), gulp.dest('dist/img') ], cb); &#125;); gulp-htmlmin插件功能描述html文件压缩，可以压缩页面JavaScript、css，去除页面空格、注释，删除多余属性等操作。 插件安装1cnpm install gulp-htmlmin --save-dev 使用方法参数1234567891011var gulp = require('gulp'), htmlmin = require('gulp-htmlmin'), pump = require('pump');gulp.task('testHtmlmin', function () &#123; pump([ gulp.src('src/html/*.html'), htmlmin(), gulp.dest('dist/html') ], cb)&#125;); 参数配置1234567891011121314151617181920var gulp = require('gulp'), htmlmin = require('gulp-htmlmin');gulp.task('testHtmlmin', function () &#123; var options = &#123; removeComments: true,//清除HTML注释 collapseWhitespace: true,//压缩HTML collapseBooleanAttributes: true,//省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt; removeEmptyAttributes: true,//删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt; removeScriptTypeAttributes: true,//删除&lt;script&gt;的type="text/javascript" removeStyleLinkTypeAttributes: true,//删除&lt;style&gt;和&lt;link&gt;的type="text/css" minifyJS: true,//压缩页面JS minifyCSS: true//压缩页面CSS &#125;; pump([ gulp.src('src/html/*.html'), htmlmin(options), gulp.dest('dist/html') ], cb)&#125;); gulp-less插件功能描述将less文件编译成css，当有less文件发生改变自动编译less，并保证less语法错误或出现异常时能正常工作并提示错误信息。 插件安装1cnpm install gulp-less --save-dev 使用方法普通使用1234567891011var gulp = require('gulp'), less = require('gulp-less'), pump = require('pump');gulp.task('testLess', function (cb) &#123; pump([ gulp.src('src/less/index.less'), less(), gulp.dest('src/css') ], cb)&#125;); 编译多个less文件1234567891011var gulp = require('gulp'), less = require('gulp-less'), pump = require('pump');gulp.task('testLess', function (cb) &#123; pump([ gulp.src(['src/less/index.less','src/less/detail.less']), less(), gulp.dest('src/css') ], cb)&#125;); 匹配符“!”，“”，“*”，“{}”12345678910111213var gulp = require('gulp'), less = require('gulp-less'), pump = require('pump');gulp.task('testLess', function (cb) &#123; pump([ //编译src目录下的所有less文件 //除了reset.less和test.less（**匹配src/less的0个或多个子文件夹） gulp.src(['src/less/*.less', '!src/less/**/&#123;reset,test&#125;.less']), less(), gulp.dest('src/css') ], cb)&#125;); 组合使用组合gulp-minify-css编译less后压缩css 12345678910111213var gulp = require('gulp'), less = require('gulp-less'), minifyCss = require('gulp-minify-css'), pump = require('pump');gulp.task('testLess', function (cb) &#123; pump([ gulp.src(['src/less/index.less']), less(), minifyCss(), gulp.dest('src/css') ], cb)&#125;); gulp-autoprefixer插件功能描述根据设置浏览器版本自动处理浏览器前缀。使用她我们可以很潇洒地写代码，不必考虑各浏览器兼容前缀。【特别是开发移动端页面时，就能充分体现它的优势。例如兼容性不太好的flex布局。】 插件安装1cnpm install gulp-autoprefixer --save-dev 使用方法参数12345678910111213141516171819var gulp = require('gulp'), autoprefixer = require('gulp-autoprefixer'), pump = require('pump');gulp.task('testAutoFx', function(cb) &#123; pump([ gulp.src('src/css/index.css'), autoprefixer(&#123; browsers: ['last 2 versions', 'Android &gt;= 4.0'], //是否美化属性值 默认：true 像这样： //-webkit-transform: rotate(45deg); // transform: rotate(45deg); cascade: true, //是否去掉不必要的前缀 默认：true remove :true &#125;), gulp.dest('dist/css') ], cb)&#125;); 常用参数gulp-autoprefixer的browsers参数详解（） 12345678● last 2 versions: 主流浏览器的最新两个版本● last 1 Chrome versions: 谷歌浏览器的最新版本● last 2 Explorer versions: IE的最新两个版本● last 3 Safari versions: 苹果浏览器最新三个版本● Firefox &gt;= 20: 火狐浏览器的版本大于或等于20● iOS 7: IOS7版本● Firefox ESR: 最新ESR版本的火狐● &gt; 5%: 全球统计有超过5%的使用率 各浏览器的标识： 12345678910111213Android for android WebView.BlackBerry or bb for Blackberry browser.Chrome for Google Chrome.Firefox or ff for Mozilla Firefox.Explorer or ie for Internet Explorer.ios or ios_saf for iOS Safari.Opera for Opera.Safari for desktop Safari.OperaMobile or op_mob for Opera Mobile.OperaMini or op_mini for Opera Mini.ChromeAndroid or and_chrFirefoxAndroid or and_ff for Firefox for Android.ExplorerMobile or ie_mob for Internet Explorer Mobile. gulp-sourcemaps插件功能描述生成sourcemap文件 插件安装1cnpm install gulp-sourcemaps --save-dev 使用方法1234567891011121314151617var gulp = require('gulp'), uglify = require('gulp-uglify'), concat = require('gulp-concat'), sourcemaps = require('gulp-sourcemaps') pump = require('pump');gulp.task('jsmin', function(cb) &#123; pump([ gulp.src('src/js/*.js'), sourcemaps.init(), concat('demo.js'), uglify(), sourcemaps.write(), gulp.dest('dist/js') ], cb )&#125;); gulp-rev-append使用gulp-rev-append给页面的引用添加版本号，清除页面引用缓存。 github：https://github.com/bustardcelly/gulp-rev-append 安装gulp-rev-append1cnpm install gulp-rev-append --save-dev 配置html页面引用gulp-rev-append 插件将通过正则(?:href|src)=”(.)[?]rev=(.)[“]查找并给指定链接填加版本号（默认根据文件MD5生成，因此文件未发生改变，此版本号将不会变） 12345678910111213&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;link rel="stylesheet" href="css/style.css?rev=@@hash"&gt; &lt;script src="js/js-one.js?rev=@@hash"&gt;&lt;/script&gt; &lt;script src="js/js-two.js"&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;div&gt;hello, world!&lt;/div&gt; &lt;img src="img/test.jpg?rev=@@hash" alt="" /&gt; &lt;script src="js/js-three.js?rev=@@hash"&gt;&lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 配置gulpfile.js基本使用（给页面引用url添加版本号，以清除页面缓存） 12345678var gulp = require('gulp'), rev = require('gulp-rev-append');gulp.task('testRev', function () &#123; gulp.src('src/html/index.html') .pipe(rev()) .pipe(gulp.dest('dist/html'));&#125;); 执行任务命令提示符执行：gulp testRev gulp-minify-css本地安装gulp-minify-cssgithub：https://github.com/jonathanepollack/gulp-minify-css 安装：命令提示符执行1cnpm install gulp-minify-css --save-dev 配置gulpfile.js基本使用 12345678var gulp = require('gulp'), cssmin = require('gulp-minify-css');gulp.task('testCssmin', function () &#123; gulp.src('src/css/*.css') .pipe(cssmin()) .pipe(gulp.dest('dist/css'));&#125;); gulp-minify-css 最终是调用clean-css ,其他参数查看这里 1234567891011121314var gulp = require('gulp'), cssmin = require('gulp-minify-css');gulp.task('testCssmin', function () &#123; gulp.src('src/css/*.css') .pipe(cssmin(&#123; advanced: false,//类型：Boolean 默认：true [是否开启高级优化（合并选择器等）] compatibility: 'ie7',//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式] keepBreaks: true,//类型：Boolean 默认：false [是否保留换行] keepSpecialComments: '*' //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀 &#125;)) .pipe(gulp.dest('dist/css'));&#125;); 给css文件里引用url加版本号（根据引用文件的md5生产版本号），像这样： 1234567891011var gulp = require('gulp'), cssmin = require('gulp-minify-css'); //确保已本地安装gulp-make-css-url-version [cnpm install gulp-make-css-url-version --save-dev] cssver = require('gulp-make-css-url-version');gulp.task('testCssmin', function () &#123; gulp.src('src/css/*.css') .pipe(cssver()) //给css文件里引用文件加版本号（文件MD5） .pipe(cssmin()) .pipe(gulp.dest('dist/css'));&#125;); 若想保留注释，这样注释即可： 123/*! Important comments included in minified output.*/ 执行任务命令提示符执行：gulp testCssmin gulp-uglify安装gulp-uglifygithub：https://github.com/terinjokes/gulp-uglify 安装：命令提示符执行 1cnpm install gulp-uglify --save-dev 注意：没有安装cnpm请使用 npm install gulp-uglify –save-dev说明：–save-dev 保存配置信息至 package.json 的 devDependencies 节点。 配置gulpfile.js基本使用12345678var gulp = require('gulp'), uglify = require('gulp-uglify');gulp.task('jsmin', function () &#123; gulp.src('src/js/index.js') .pipe(uglify()) .pipe(gulp.dest('dist/js'));&#125;); 压缩多个js文件12345678var gulp = require(&apos;gulp&apos;), uglify = require(&apos;gulp-uglify&apos;);gulp.task(&apos;jsmin&apos;, function () &#123; gulp.src([&apos;src/js/index.js&apos;,&apos;src/js/detail.js&apos;]) //多个文件以数组形式传入 .pipe(uglify()) .pipe(gulp.dest(&apos;dist/js&apos;));&#125;); 匹配符“!”，“”，“*”，“{}”12345678910var gulp = require('gulp'), uglify= require('gulp-uglify');gulp.task('jsmin', function () &#123; //压缩src/js目录下的所有js文件 //除了test1.js和test2.js（**匹配src/js的0个或多个子文件夹） gulp.src(['src/js/*.js', '!src/js/**/&#123;test1,test2&#125;.js']) .pipe(uglify()) .pipe(gulp.dest('dist/js'));&#125;); 指定变量名不混淆改变1234567891011var gulp = require('gulp'), uglify= require('gulp-uglify');gulp.task('jsmin', function () &#123; gulp.src(['src/js/*.js', '!src/js/**/&#123;test1,test2&#125;.js']) .pipe(uglify(&#123; //mangle: true,//类型：Boolean 默认：true 是否修改变量名 mangle: &#123;except: ['require' ,'exports' ,'module' ,'$']&#125;//排除混淆关键字 &#125;)) .pipe(gulp.dest('dist/js'));&#125;); gulp-uglify其他参数 具体参看123456789101112var gulp = require('gulp'), uglify= require('gulp-uglify');gulp.task('jsmin', function () &#123; gulp.src(['src/js/*.js', '!src/js/**/&#123;test1,test2&#125;.js']) .pipe(uglify(&#123; mangle: true,//类型：Boolean 默认：true 是否修改变量名 compress: true,//类型：Boolean 默认：true 是否完全压缩 preserveComments: 'all' //保留所有注释 &#125;)) .pipe(gulp.dest('dist/js'));&#125;); 执行任务命令提示符执行：gulp jsmin gulp-run-sequence插件功能描述控制多个任务进行顺序执行或者并行执行 插件安装1cnpm install gulp-run-sequence --save-dev 使用方法执行前端代码自动构建，一般会分为删除目标目录 代码压缩打包（这其中包括js，CSS，HTML，图片的压缩打包，这些步骤是可以并行执行的） 开启浏览器 监控代码 使用如下代码，则可以控制流程为clean执行，执行完成js,css,html.image并行执行，全部执行完成watch执行123456789101112131415161718192021var gulp = require('gulp'), runSequence = require('gulp-run-sequence'), pump = require('pump');gulp.task('default', function(cb) &#123; runSequence( 'clean', ['js', 'css', 'html', 'image'], 'watch', cb );&#125;);gulp.task('clean', function(cb) &#123;...&#125;);gulp.task('js', function(cb) &#123;...&#125;);gulp.task('css', function(cb) &#123;...&#125;);gulp.task('html', function(cb) &#123;...&#125;);gulp.task('image', function(cb) &#123;...&#125;);gulp.task('watch', ['browser'], function(cb) &#123;...&#125;); browser-sync插件功能描述同步浏览器，具体可点击参考 插件安装1cnpm install browser-sync --save-dev 使用方法参数开启浏览器，并定义dist目录下的html/css/js发生变化直接同步至浏览器 1234567891011121314151617181920212223var gulp = require('gulp'), browserSync = require('browser-sync').create();gulp.task('browser', function() &#123; browserSync.init([ './dist/**/*.html', './dist/**/*.css', './dist/**/*.js' ], &#123; server: &#123; baseDir: "./" &#125; &#125;);&#125;);// 监控src目录下css文件，发生变化则执行css任务// 监控src目录下js文件，发生变化则执行js任务// 监控src目录下html文件，发生变化则执行html任务gulp.task('watch', ['browser'], function() &#123; gulp.watch('./src/**/*.css', ['css']); gulp.watch('./src/**/*.js', ['js']); gulp.watch('./src/**/*.html', ['html']);&#125;) require-dir插件功能描述使用gulpfile.js单文件编写任务，会造成文件过大，通过使用 require-dir 模块将任务分离到多个文件 插件安装1cnpm install require-dir --save-dev 使用方法###文件结构： gulpfile.jstasks/├── dev.js├── release.js└── test.js gulpfile.js12var requireDir = require('require-dir');requireDir('./tasks', &#123; recurse: true &#125;); gulp会自动加载tasks目录下所有文件中定义的任务，并执行default任务 本文有任何错误，或有任何疑问，欢迎留言说明。邮箱: opensmarty@163.comQQ: 1327400982 Reference linksgulp入门教程]]></content>
      <categories>
        <category>工作流</category>
      </categories>
      <tags>
        <tag>gulp</tag>
        <tag>自动化</tag>
        <tag>构建工具</tag>
        <tag>教程</tag>
        <tag>Install</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gulp]]></title>
    <url>%2F2017%2F08%2F23%2Fgulp%2F</url>
    <content type="text"><![CDATA[gulp实践gulp 简介地址： http://gulpjs.com/ 它是一款nodejs应用。 它是打造前端工作流的利器，打包、压缩、合并、git、远程操作…， 简单易用 无快不破 高质量的插件 …. gulp 安装及常见问题1. 安装gulp1npm install -g gulp 如果报Error: EACCES, open ‘/Users/xxx/xxx.lock错误。先执行：sudo chown -R $(whoami) $HOME/.npm; 如果使用npm安装插件太慢（被墙），可执行 npm install -g cnpm –registry=https://registry.npm.taobao.org,先安装cnpm, 之后再安装插件时用cnpm安装cnpm install gulp 2. 安装各种插件12345678910111213141516npm install --save gulp //本地使用gulpnpm install --save gulp-imagemin //压缩图片npm install --save gulp-minify-css //压缩cssnpm install --save gulp-ruby-sass //sassnpm install --save gulp-less //less npm install --save gulp-jshint //js代码检测npm install --save gulp-uglify //js压缩npm install --save gulp-concat //文件合并npm install --save gulp-rename //文件重命名npm install --save png-sprite //png合并npm install --save gulp-htmlmin //压缩htmlnpm install --save gulp-clean //清空文件夹npm install --save browser-sync //文件修改浏览器自动刷新npm install --save gulp-shell //执行shell命令npm install --save gulp-ssh //操作远程机器npm install --save run-sequence //task顺序执行 附加插件：yargs获取的参数判断是开发打包还是生产打包，lodash用于操作数组，path用于写路径. 123npm install --save yargs npm install --save lodashnpm install --save path 或者根据package.json 自动安装。把package.json拷贝到自己的工程目录下，进入目录，执行:npm install gulp 使用案例所有代码在：https://github.com/opensmarty 范例1:demo1目录结构如下。把demo1中的 index.html压缩，把src里面的less编译、合并、压缩、重命名、存储到dist。src里面的图片压缩、合并存储到dist。src里面的js做代码检查，压缩，合并，存储到dist。 123456789101112131415161718192021+ demo1 + dist + css - merge.min.css + js - merge.min.js + imgs - 1.png - 2.png - index.html + src + css - a.css - b.css + js - a.js - b.js + imgs - 1.png - 2.png - index.html gulpfile.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849var gulp = require('gulp');// 引入组件var minifycss = require('gulp-minify-css'), // CSS压缩 uglify = require('gulp-uglify'), // js压缩 concat = require('gulp-concat'), // 合并文件 rename = require('gulp-rename'), // 重命名 clean = require('gulp-clean'), //清空文件夹 minhtml = require('gulp-htmlmin'), //html压缩 jshint = require('gulp-jshint'), //js代码规范性检查 imagemin = require('gulp-imagemin'); //图片压缩gulp.task('html', function() &#123; return gulp.src('src/*.html') .pipe(minhtml(&#123;collapseWhitespace: true&#125;)) .pipe(gulp.dest('dist'));&#125;);gulp.task('css', function(argument) &#123; gulp.src('src/css/*.css') .pipe(concat('merge.css')) .pipe(rename(&#123; suffix: '.min' &#125;)) .pipe(minifycss()) .pipe(gulp.dest('dist/css/'));&#125;);gulp.task('js', function(argument) &#123; gulp.src('src/js/*.js') .pipe(jshint()) .pipe(jshint.reporter('default')) .pipe(concat('merge.js')) .pipe(rename(&#123; suffix: '.min' &#125;)) .pipe(uglify()) .pipe(gulp.dest('dist/js/'));&#125;);gulp.task('img', function(argument)&#123; gulp.src('src/imgs/*') .pipe(imagemin()) .pipe(gulp.dest('dist/imgs'));&#125;);gulp.task('clear', function()&#123; gulp.src('dist/*',&#123;read: false&#125;) .pipe(clean());&#125;); 1gulp.task('build', ['html', 'css', 'js', 'img']); 执行： 1gulp build; 可实现src目录下的html压缩，css、js合并压缩，图片压缩，最后放入 dist目录下 范例2:监控项目文件变动，自动刷新浏览器，本地调试， 并且把本地代码同步到远程服务器 1234567891011121314151617181920212223242526272829303132333435363738394041var gulp = require('gulp');// 引入组件var browserSync = require('browser-sync').create(); //用于浏览器自动刷新var scp = require('gulp-scp2'); //用于scp到远程机器var fs = require('fs');gulp.task('reload', function()&#123; browserSync.reload();&#125;);gulp.task('server', function() &#123; browserSync.init(&#123; server: &#123; baseDir: "./src" &#125; &#125;); gulp.watch(['**/*.css', '**/*.js', '**/*.html'], ['reload', 'scp']);&#125;);gulp.task('scp', function() &#123; return gulp.src('src/**/*') .pipe(scp(&#123; host: '121.40.201.213', username: 'root', privateKey: fs.readFileSync('/Users/wingo/.ssh/id_rsa'), dest: '/var/www/fe.jirengu.com', watch: function(client) &#123; client.on('write', function(o) &#123; console.log('write %s', o.destination); &#125;); &#125; &#125;)) .on('error', function(err) &#123; console.log(err); &#125;);&#125;); 执行： 12gulp scp; // 可把本地开发环境代码拷贝到服务器gulp server; //可在本地创建服务器，本地开发浏览器立刻刷新 范例3:监控项目文件变动，自动压缩、合并、打包、添加版本号 html1234567891011121314151617181920&lt;/html&gt;&lt;head&gt;&lt;!-- build:css css/merge.css --&gt;&lt;link href="css/a.css" rel="stylesheet"&gt;&lt;link href="css/b.css" rel="stylesheet"&gt;&lt;!-- endbuild --&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;demo1-工程化手动版&lt;/p&gt;&lt;!-- build:js js/merge.js --&gt;&lt;script type="text/javascript" src="js/a.js"&gt;&lt;/script&gt;&lt;script type="text/javascript" src="js/b.js"&gt;&lt;/script&gt;&lt;!-- endbuild --&gt;&lt;/body&gt;&lt;/html&gt; gulpfile.js1234567891011121314151617181920212223242526272829303132333435var gulp = require('gulp');var rev = require('gulp-rev'); //添加版本号var revReplace = require('gulp-rev-replace'); //版本号替换var useref = require('gulp-useref'); //解析html资源定位var filter = require('gulp-filter'); //过滤数据var uglify = require('gulp-uglify');var csso = require('gulp-csso'); //css优化压缩var clean = require('gulp-clean');gulp.task("index", ['clear'], function() &#123; var jsFilter = filter("**/*.js", &#123;restore: true&#125;); var cssFilter = filter("**/*.css", &#123;restore: true&#125;); var userefAssets = useref.assets(); return gulp.src("src/index.html") .pipe(userefAssets) // Concatenate with gulp-useref .pipe(jsFilter) .pipe(uglify()) // Minify any javascript sources .pipe(jsFilter.restore) .pipe(cssFilter) .pipe(csso()) // Minify any CSS sources .pipe(cssFilter.restore) .pipe(rev()) // Rename the concatenated files .pipe(userefAssets.restore()) .pipe(useref()) .pipe(revReplace()) // Substitute in new filenames .pipe(gulp.dest('dist'));&#125;);gulp.task('clear', function()&#123; gulp.src('dist/*',&#123;read: false&#125;) .pipe(clean());&#125;); 范例4:本地shell命令， 远程shell， 任务顺序执行… 123456789101112131415161718192021222324252627282930313233343536373839404142434445var gulp = require('gulp');var shell = require('gulp-shell');var runSequence = require('run-sequence');var fs = require('fs');var GulpSSH = require('gulp-ssh');//shell操作,gulp.task('git', shell.task(['git add .', 'git commit -am "dd"', 'git push -u origin dev']));gulp.task('clear', shell.task(['find . -name ".DS_Store" -depth -exec rm &#123;&#125; \\;']));//操作远程主机var gulpSSH = new GulpSSH(&#123; ignoreErrors: false, sshConfig: &#123; host: '121.40.201.213', port: 22, username: 'root', privateKey: fs.readFileSync('/Users/wingo/.ssh/id_rsa') &#125;&#125;);gulp.task('remote', function() &#123; return gulpSSH .shell(['cd /var/www/fe.jirengu.com', 'git pull origin dev', 'rm -rf _runtime']);&#125;);gulp.task('build', function(callback) &#123; runSequence( 'git', 'clear', 'remote', callback );&#125;);gulp.task('watch', function() &#123; gulp.watch(['**/*.css', '**/*.js', '**/*.html', '**/*.php'], ['build']);&#125;); 本文有任何错误，或有任何疑问，欢迎留言说明。邮箱: opensmarty@163.comQQ: 1327400982 Reference linksgulp入门教程]]></content>
      <categories>
        <category>工作流</category>
      </categories>
      <tags>
        <tag>gulp</tag>
        <tag>自动化</tag>
        <tag>构建工具</tag>
        <tag>Install</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[项目错误代码设计]]></title>
    <url>%2F2017%2F08%2F21%2F%E9%A1%B9%E7%9B%AE%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81%E8%AE%BE%E8%AE%A1%2F</url>
    <content type="text"><![CDATA[Error code错误代码说明 :错误代码原则统一格式：A-BB-CCC A:错误级别，如1代表系统级错误，2代表服务级错误； B:项目或模块名称，一般公司不会超过99个项目； C:具体错误编号，自增即可，一个项目999种错误应该够用； 错误代码解析例如，100001错误代码解析如下： 服务级错误 服务模块代码 具体错误代码 1 00 001 错误返回值格式1234567&#123; &quot;success&quot; : true|false, &quot;data&quot;: []|&#123;&#125;, &quot;code&quot; : &quot;101200&quot;, &quot;type&quot; : &quot; text/html | text/plain | text/xml | application/json&quot;, &quot;message&quot; : &quot;Success｜请求成功&quot;&#125; 错误代码对照表 :系统级错误代码 错误代码 错误信息 详细描述 100001 System error 系统错误 100002 Service unavailable 服务暂停 100003 Remote service error 远程服务错误 100004 IP limit IP限制不能请求该资源 100005 Permission denied, need a high level appkey 该资源需要appkey拥有授权 100006 Source paramter (appkey) is missing 缺少source (appkey) 参数 100007 Unsupport mediatype (%s) 不支持的MediaType (%s) 100008 Param error, see doc for more info 参数错误，请参考API文档 100009 Too many pending tasks, system is busy 任务过多，系统繁忙 100010 Job expired 任务超时 100011 RPC error RPC错误 100012 Illegal request 非法请求 100013 Invalid user 不合法的用户 100014 Insufficient app permissions 应用的接口访问权限受限 100016 Miss required parameter (%s) , see doc for more info 缺失必选参数 (%s)，请参考API文档 100017 Parameter (%s)’s value invalid, expect (%s) , but get (%s) , see doc for more info 参数值非法，需为 (%s)，实际为 (%s)，请参考API文档 100018 Request body length over limit 请求长度超过限制 100020 Request api not found 接口不存在 100021 HTTP method is not suported for this request 请求的HTTP METHOD不支持，请检查是否选择了正确的POST/GET方式 100022 IP requests out of rate limit IP请求频次超过上限 100023 User requests out of rate limit 用户请求频次超过上限 100024 User requests for (%s) out of rate limit 用户请求特殊接口 (%s) 频次超过上限 服务级错误代码 错误代码 错误信息 详细描述 200001 IDs is null IDs参数为空 200001 IDs is null IDs参数为空 200002 Uid parameter is null Uid参数为空 200003 User does not exists 用户不存在 200005 Unsupported image type, only suport JPG, GIF, PNG 不支持的图片类型，仅仅支持JPG、GIF、PNG 200006 Image size too large 图片太大 200007 Does multipart has image 请确保使用multpart上传图片 200008 Content is null 内容为空 200009 IDs is too many IDs参数太长了 200012 Text too long, please input text less than 140 characters 输入文字太长，请确认不超过140个字符 200013 Text too long, please input text less than 300 characters 输入文字太长，请确认不超过300个字符 200014 Param is error, please try again 安全检查参数有误，请再调用一次 200015 Account or ip or app is illgal, can not continue 账号、IP或应用非法，暂时无法完成此操作 200016 Out of limit 发布内容过于频繁 200017 Repeat content 提交相似的信息 200018 Contain illegal website 包含非法网址 200019 Repeat conetnt 提交相同的信息 200020 Contain advertising 包含广告信息 200021 Content is illegal 包含非法内容 200022 Your ip’s behave in a comic boisterous or unruly manner 此IP地址上的行为异常 200031 Test and verify 需要验证码 200032 Update success, while server slow now, please wait 1-2 minutes 发布成功，目前服务器可能会有延迟，请耐心等待1-2分钟 错误代码 错误信息 详细描述 201001 Target weibo does not exist 不存在的微博 201002 Not your own weibo 不是你发布的微博 201003 Can’t repost yourself weibo 不能转发自己的微博 201004 Illegal weibo 不合法的微博 201009 Weibo id is null 微博ID为空 201011 Repeated weibo text 不能发布相同的微博 错误代码 错误信息 详细描述 202001 Target weibo comment does not exist 不存在的微博评论 202001 Illegal comment 不合法的评论 202002 Not your own comment 不是你发布的评论 202004 Comment id is null 评论ID为空 错误代码 错误信息 详细描述 203001 Can’t send direct message to user who is not your follower 不能给不是你粉丝的人发私信 203002 Illegal direct message 不合法的私信 203003 Not your own direct message 不是属于你的私信 203005 Direct message does not exist 不存在的私信 203006 Repeated direct message text 不能发布相同的私信 203007 Illegal direct message id 非法的私信ID 错误代码 错误信息 详细描述 204001 Domain not exist 域名不存在 204002 Wrong verifier Verifier错误 错误代码 错误信息 详细描述 205001 Source_user or target_user does not exists 参数source_user或者target_user的用户不存在 205002 Please input right target user id or screen_name 必须输入目标用户id或者screen_name 205003 Need you follow user_id 参数user_id必须是你关注的用户 205004 Can not follow yourself 你不能关注自己 205005 Social graph updates out of rate limit 加关注请求超过上限 205006 Already followed 已经关注此用户 205007 Verification code is needed 需要输入验证码 205008 According to user privacy settings,you can not do this 根据对方的设置，你不能进行此操作 205009 Private friend count is out of limit 悄悄关注个数到达上限 205009 Not private friend 不是悄悄关注人 205011 Already followed privately 已经悄悄关注此用户 205012 Please delete the user from you blacklist before you follow the user 你已经把此用户加入黑名单，加关注前请先解除 205013 Friend count is out of limit! 你的关注人数已达上限 205021 Hi Superman, you have concerned a lot of people, have a think of how to make other people concern about you! ! If you have any questions, please contact Sina customer service: 400 690 0000 hi 超人，你今天已经关注很多喽，接下来的时间想想如何让大家都来关注你吧！如有问题，请联系xx客服：400 690 0000 205022 Not followed 还未关注此用户 205023 Not followers 还不是粉丝 205024 Hi Superman, you have cancelled concerning a lot of people, have a think of how to make other people concern about you! ! If you have any questions, please contact Sina customer service: 400 690 0000 hi 超人，你今天已经取消关注很多喽，接下来的时间想想如何让大家都来关注你吧！如有问题，请联系xx客服：400 690 0000 错误代码 错误信息 详细描述 206001 List name too long, please input text less than 10 characters 列表名太长，请确保输入的文本不超过10个字符 206002 List description too long, please input text less than 70 characters 列表描叙太长，请确保输入的文本不超过70个字符 206003 List does not exists 列表不存在 206004 Only the owner has the authority 不是列表的所属者 206005 Illegal list name or list description 列表名或描叙不合法 206006 Object already exists 记录已存在 206007 DB error, please contact the administator 数据库错误，请联系系统管理员 206008 List name duplicate 列表名冲突 206010 Does not support private list 目前不支持私有分组 206011 Create list error 创建列表失败 206012 Only support private list 目前只支持私有分组 206013 You hava subscriber too many lists 订阅列表达到上限 206014 Too many lists, see doc for more info 创建列表达到上限，请参考API文档 206015 Too many members, see doc for more info 列表成员上限，请参考API文档 错误代码 错误信息 详细描述 207001 Repeated tag text 不能提交相同的收藏标签 207002 Tags is too many 最多两个收藏标签 207003 Illegal tag name 收藏标签名不合法 错误代码 错误信息 详细描述 208001 Trend_name is null 参数trend_name是空值 208002 Trend_id is null 参数trend_id是空值 错误代码 错误信息 详细描述 209001 Error: in blacklist 错误:已经添加了黑名单 209002 Error: Blacklist limit has been reached. 错误:已达到黑名单上限 209003 Error: System administrators can not be added to the blacklist. 错误:不能添加系统管理员为黑名单 209004 Error: Can not add yourself to the blacklist. 错误:不能添加自己为黑名单 209005 Error: not in blacklist 错误:不在黑名单中 错误代码 错误信息 详细描述 210001 Tags parameter is null 标签参数为空 210002 Tags name too long 标签名太长，请确保每个标签名不超过14个字符 错误代码 错误信息 详细描述 211001 Domain parameter is error 参数domain错误 211002 The phone number has been used 该手机号已经被使用 211003 The account has bean bind phone 该用户已经绑定手机 211004 Wrong verifier Verifier错误 错误代码 错误信息 详细描述 213001 Auth faild 认证失败 213002 Username or password error 用户名或密码不正确 213003 Username and pwd auth out of rate limit 用户名密码认证超过请求限制 213004 Version rejected 版本号错误 213005 Parameter absent 缺少必要的参数 213006 Parameter rejected OAuth参数被拒绝 213007 Timestamp refused 时间戳不正确 213008 Nonce used 参数nonce已经被使用 213009 Signature method rejected 签名算法不支持 213010 Signature invalid 签名值不合法 213011 Consumer key unknown 参数consumer_key不存在 213012 Consumer key refused 参数consumer_key不合法 213013 Miss consumer key 参数consumer_key缺失 213014 Token used Token已经被使用 213015 Token expired Token已经过期 213016 Token revoked Token不合法 213017 Token rejected Token不合法 213018 Verifier fail Pin码认证失败 213019 Accessor was revoked 授权关系已经被解除 213020 OAuth2 must use https 使用OAuth2必须使用https 213021 Applications over the unaudited use restrictions 未审核的应用使用人数超过限制 213027 Expired token token过期 213035 Request uid’s value must be the current user uid参数仅允许传入当前授权用户uid 错误代码 错误信息 详细描述 215001 Urls is null 参数urls是空的 215002 Urls is too many 参数urls太多了 215003 IP is null IP是空值 215004 Url is null 参数url是空值 错误代码 错误信息 详细描述 216001 Manage notice error, need auth 需要系统管理员的权限 216002 Contains forbid world 含有敏感词 216003 Applications send notice over the restrictions 通知发送达到限制 错误代码 错误信息 详细描述 217001 Manage remind error, need auth 提醒失败，需要权限 217002 Invalid category 无效分类 217003 Invalid status 无效状态码 错误代码 错误信息 详细描述 219001 Geo code input error 地理信息输入错误 其它级错误代码（适用于扩展） 错误代码 错误信息 详细描述 3020001 Other error 其它错误 HTTP’s content-Type后续补上. 本文有任何错误，或有任何疑问，欢迎留言说明。邮箱: opensmarty@163.comQQ: 1327400982 Reference Links【参考１】: helloworld【参考２】: Weibo【参考３】: Taobao【参考４】: QQ]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>错误</tag>
        <tag>错误代码</tag>
        <tag>设计</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[How do you make blog for yourself ?]]></title>
    <url>%2F2017%2F08%2F18%2Fhelloworld%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartInstall hexo123npm install hexo-cli g #安装npm update hexo -g #升级hexo init blog #初始化博客文件夹 Install theme Next1git clone https://github.com/iissnan/hexo-theme-next themes/next Install Plugins1234567891011121314# 切换到该路径cd blog#安装hexo的扩展插件npm install#安装其它插件npm install hexo-server --savenpm install hexo-admin --savenpm install hexo-generator-archive --savenpm install hexo-generator-feed --savenpm install hexo-generator-search --savenpm install hexo-generator-tag --savenpm install hexo-deployer-git --savenpm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save Create a new post1234hexo new "postName" #新建文章hexo new page "pageName" #新建页面hexo new photo "My Gallery"hexo new "Hello World" --lang tw More info: Writing Run server1hexo server More info: Server Abbreviate hexo commands1234567hexo g：hexo generatehexo c：hexo cleanhexo s：hexo serverhexo d：hexo deployhexo clean &amp;&amp; hexo g -s #清除、生成、启动hexo clean &amp;&amp; hexo g -d #清除、生成、部署 Generate static files1hexo generate More info: Generating Deploy to remote sites1hexo deploy More info: [Deployment](https://hexo.io/docs/deployment.html 本文有任何错误，或有任何疑问，欢迎留言说明。邮箱: opensmarty@163.comQQ: 1327400982 Reference linkshelloworldHexoHexo NextNext SourceInstall Hexo adminOptimize the hexo-theme-next]]></content>
      <categories>
        <category>Python</category>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>Install</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
</search>
